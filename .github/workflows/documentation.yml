name: Documentation Generation

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/**/*.nix'
      - 'systems/**/*.nix' 
      - 'hardware/**/*.nix'
      - 'flake.nix'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**/*.nix'
      - 'systems/**/*.nix'
      - 'hardware/**/*.nix' 
      - 'flake.nix'
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Generate module documentation
      run: |
        echo "📚 Generating module documentation..."
        
        # Create docs directory
        mkdir -p docs/modules
        
        # Generate module overview
        cat > docs/modules/README.md << 'EOF'
        # NixOS Configuration Modules
        
        This directory contains automatically generated documentation for the modular NixOS configuration.
        
        ## Architecture Overview
        
        The configuration follows strict separation of concerns:
        
        - **systems/**: Host-specific configurations (UUID, hostname, unique settings)
        - **hardware/**: Hardware model profiles (shared across same hardware)  
        - **modules/**: Feature modules (shared functionality)
        
        ## Module Index
        
        EOF
        
        # Document each module
        for module in modules/*.nix; do
          if [ -f "$module" ]; then
            module_name=$(basename "$module" .nix)
            echo "### $(basename "$module")" >> docs/modules/README.md
            echo "" >> docs/modules/README.md
            
            # Extract comments and option definitions
            if grep -q "^#.*" "$module"; then
              echo "**Description:**" >> docs/modules/README.md
              grep "^#.*" "$module" | head -5 | sed 's/^# */- /' >> docs/modules/README.md
            fi
            echo "" >> docs/modules/README.md
            
            # Extract options (basic detection)
            if grep -q "options\." "$module" || grep -q "config\." "$module"; then
              echo "**Configuration options available in:** \`$module\`" >> docs/modules/README.md
            fi
            echo "" >> docs/modules/README.md
        done

    - name: Generate system documentation  
      run: |
        echo "🖥️ Generating system documentation..."
        
        mkdir -p docs/systems
        
        cat > docs/systems/README.md << 'EOF'
        # System Configurations
        
        ## Active Systems
        
        EOF
        
        for system_dir in systems/*/; do
          if [ -d "$system_dir" ]; then
            system_name=$(basename "$system_dir")
            echo "### $system_name" >> docs/systems/README.md
            echo "" >> docs/systems/README.md
            
            # Extract system-specific configuration details
            if [ -f "$system_dir/default.nix" ]; then
              echo "**Configuration:** \`systems/$system_name/default.nix\`" >> docs/systems/README.md
              
              # Look for imports to understand what modules are used
              if grep -q "imports.*=" "$system_dir/default.nix"; then
                echo "" >> docs/systems/README.md
                echo "**Imported modules:**" >> docs/systems/README.md
                grep -A 10 "imports.*=" "$system_dir/default.nix" | grep -o '\./[^]]*' | sed 's/^/- /' >> docs/systems/README.md || true
              fi
            fi
            echo "" >> docs/systems/README.md
          fi
        done

    - name: Generate flake documentation
      run: |
        echo "❄️ Generating flake documentation..."
        
        mkdir -p docs
        
        cat > docs/flake-overview.md << 'EOF'
        # Flake Configuration Overview
        
        ## Inputs
        
        EOF
        
        # Extract flake inputs
        echo "This flake uses the following inputs:" >> docs/flake-overview.md
        echo "" >> docs/flake-overview.md
        
        grep -A 20 "inputs = {" flake.nix | grep -E '^\s*[a-zA-Z-]+\s*=' | while read -r line; do
          input_name=$(echo "$line" | cut -d' ' -f1 | sed 's/^[[:space:]]*//')
          if echo "$line" | grep -q "github:"; then
            repo=$(echo "$line" | grep -o 'github:[^"]*' | head -1)
            echo "- **$input_name**: $repo" >> docs/flake-overview.md
          elif echo "$line" | grep -q "url.*="; then
            url=$(echo "$line" | grep -o '"[^"]*"' | head -1 | tr -d '"')
            echo "- **$input_name**: $url" >> docs/flake-overview.md
          fi
        done
        
        echo "" >> docs/flake-overview.md
        echo "## System Configurations" >> docs/flake-overview.md
        echo "" >> docs/flake-overview.md
        echo "Available system configurations:" >> docs/flake-overview.md
        echo "" >> docs/flake-overview.md
        
        grep -A 5 "nixosConfigurations\." flake.nix | grep -o 'nixosConfigurations\.[a-zA-Z0-9_-]*' | while read -r config; do
          system_name=$(echo "$config" | cut -d'.' -f2)
          echo "- **$system_name**: \`nix build .#nixosConfigurations.$system_name.config.system.build.toplevel\`" >> docs/flake-overview.md
        done

    - name: Update documentation index
      run: |
        echo "📝 Creating documentation index..."
        
        cat > docs/README.md << 'EOF'
        # NixOS Configuration Documentation
        
        Automatically generated documentation for this modular NixOS configuration.
        
        ## Contents
        
        - [Module Documentation](modules/README.md) - Feature modules and their options
        - [System Configurations](systems/README.md) - Host-specific configurations  
        - [Flake Overview](flake-overview.md) - Inputs and build targets
        
        ## Quick Reference
        
        ### Build Commands
        ```bash
        # Build specific system
        nix build .#nixosConfigurations.gti.config.system.build.toplevel
        nix build .#nixosConfigurations.transporter.config.system.build.toplevel
        
        # Development shell  
        nix develop
        
        # System rebuild (on target system)
        sudo nixos-rebuild switch --flake .#$(hostname)
        ```
        
        ### Architecture Principles
        
        1. **Separation of Concerns**: systems/ (instance-specific), hardware/ (model-specific), modules/ (feature-specific)
        2. **DRY Configuration**: Shared functionality in modules/base.nix and typed options
        3. **Security First**: sops-nix for secrets, YubiKey integration, secure boot with lanzaboote
        4. **Modular Design**: Each module handles one concern, clean imports
        
        ---
        
        *This documentation is automatically generated from the Nix configuration files.*
        *Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
        EOF

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add docs/
        
        if git diff --staged --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: auto-update configuration documentation

          🤖 Generated with Claude Code
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
        fi

    - name: Push documentation updates
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        git push origin main || echo "Nothing to push"

    - name: Create documentation PR
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          docs: update configuration documentation
          
          Auto-generated documentation updates for configuration changes.
          
          🤖 Generated with Claude Code
        title: "docs: update configuration documentation"  
        body: |
          ## Documentation Updates
          
          This PR contains automatically generated documentation updates based on configuration changes.
          
          ### Changes Include:
          - Updated module documentation
          - System configuration overview  
          - Flake input documentation
          
          Generated from configuration files in this PR.
        branch: automated/docs-update
        base: ${{ github.head_ref }}
        labels: |
          documentation
          automated