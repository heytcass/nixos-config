name: Dependency Updates

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch: # Allow manual triggers

jobs:
  update-flake-inputs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v15
      with:
        name: nix-community
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

    - name: Update flake inputs
      run: |
        echo "📦 Updating flake inputs..."
        
        # Update all inputs
        nix flake update
        
        # Check what changed
        if git diff --quiet flake.lock; then
          echo "No updates available"
          echo "has_updates=false" >> $GITHUB_ENV
        else
          echo "Updates found"
          echo "has_updates=true" >> $GITHUB_ENV
          
          # Generate update summary
          echo "## Flake Input Updates" > update_summary.md
          echo "" >> update_summary.md
          
          # Compare old vs new lock file (if we can get the diff)
          echo "### Changed Inputs:" >> update_summary.md
          git diff --no-index /dev/null flake.lock | grep "\"rev\":" | head -10 >> update_summary.md || true
          echo "" >> update_summary.md
          echo "See full diff in the flake.lock changes." >> update_summary.md
        fi

    - name: Test updated configuration
      if: env.has_updates == 'true'
      run: |
        echo "🧪 Testing updated configurations..."
        
        # Test both systems can build
        for system in gti transporter; do
          echo "Testing $system configuration..."
          if ! nix build .#nixosConfigurations.$system.config.system.build.toplevel --no-link; then
            echo "❌ Configuration $system failed to build with updates"
            exit 1
          fi
          echo "✅ Configuration $system builds successfully"
        done

    - name: Create Pull Request
      if: env.has_updates == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update flake inputs
          
          Automated weekly update of Nix flake inputs.
          All configurations tested and building successfully.
          
          🤖 Generated with Claude Code
        title: "chore: weekly flake input updates"
        body-path: update_summary.md
        branch: automated/flake-updates
        base: main
        labels: |
          dependencies
          automated
        reviewers: |
          heytcass
        draft: false

  security-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check for security advisories
      run: |
        echo "🔍 Checking for security-related updates..."
        
        # This is a basic check - in practice you might want to integrate
        # with vulnerability databases or use tools like vulnix
        echo "## Security Check Results" > security_report.md
        echo "" >> security_report.md
        echo "Manual security review recommended for:" >> security_report.md
        echo "- nixpkgs updates (check CVE databases)" >> security_report.md
        echo "- home-manager updates" >> security_report.md
        echo "- sops-nix updates (secrets management)" >> security_report.md
        echo "- lanzaboote updates (secure boot)" >> security_report.md
        echo "" >> security_report.md
        echo "Review flake.lock changes and related security advisories." >> security_report.md

    - name: Create Security Update Issue
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.number }}
        body-path: security_report.md